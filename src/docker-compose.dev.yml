version: '3'
services:
  # nginx:
  #     depends_on:
  #       - server
  #       - client
  #     restart: always
  #     build:
  #       dockerfile: Dockerfile.dev
  #       context: ./nginx

  #     image: gamify-nginx

  #     container_name: gamify-nginx

  #     ports:
  #       - '80:80'

  # Define client service
  client:
    # Specify details for building Docker image
    build:
      # Use the specified Dockerfile to build the image
      dockerfile: Dockerfile.dev
      # Use the specified path as the build context. This will thus be the root directory when looking for files in the Dockerfile
      context: ./client
    
    # Sets a tag for the resulting Docker image
    image: gamify-react
    
    # Sets the container name
    container_name: gamify-react 

    # Import environment variables from the specified file.
    env_file:
      - ./client/.env
    volumes:
      # Keeps the node_modules inside the Docker container to prevent the local node modules to be mounted
      - /app/client/node_modules
      # Mount the client directory on the host machine to the /app/client directory
      - ./client:/app/client
      # This is to mount our tests in the test folder
      - ./../test:/app/client/tests

    #Expose React app on port 3000
    ports:
      - 3000:3000

    environment:
      # - CHOKIDAR_USEPOLLING=true This was the old way of having React hot reload
      # The new way enables polling for file changes, which will help us for development
      - WATCHPACK_POLLING=true
    
    # This is the equivalent of passing '-i' to docker run. It keeps STDIN open even if not attached
    stdin_open: true

  # Define server service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev

    image: gamify-node

    container_name: gamify-node
    # Import environment variables from '.env' files
    env_file:
      - ./server/.env

    # Define volumes for persisting data
    volumes:
      - /app/server/node_modules
      - ./server:/app/server
      - ./../test:/app/client/tests

    #Expose the Node.js server on port 8080.
    ports:
      - 8080:8080
    command: /bin/sh -c "sleep 20 && npm run dev"
  # Define the MySql service    
  mysql:
    # Use the 'mysql' Docker image. It consists of a prebuilt environment for running MySQL.
    image: mysql
    # Simply the name of the created container
    container_name: gamify-mysql
    # The docker container will automatically restart if it stops. However, if manually stopped, it will not restart until manually restarted
    restart: always
    # Environment variables the mysql image uses to initialize the databse server
    environment:
      # Create the MySql database gamifyDb
      MYSQL_DATABASE: 'gamifyDb'
      # Creates a MySql user who has access to gamifyDb
      MYSQL_USER: 'gamify_user'
      # Sets the password for the user
      MYSQL_PASSWORD: 'gamifyGeeks'
      # Set the root password. Not actually sure what it does.
      MYSQL_ROOT_PASSWORD: 'gamifyRoot'
    # From my understanding, Volumes are used to persist data generated by and used by Docker containers
    volumes:
      # Where the MySql data will persist
      - mysql-data:/var/lib/mysql
      # This is actually mounting local files (our sql file) to docker's entry point
      # This allows us to have all the SQL scripts automatically executed upon container startups
      - ./server/DDL/gamifyDb.sql:/docker-entrypoint-initdb.d/gamifyDb.sql
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 1m30s
      timeout: 20s
      retries: 10
      start_period: 30s
# Define the persistent volume mentioned earlier. This is where the MySql data will be stored.
volumes:
  mysql-data:
  