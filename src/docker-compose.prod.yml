version: '3'
services: 

  client:

    build:
      dockerfile: Dockerfile.prod 

      context: ./client
    
    image: gamify-react-prod 

    container_name: gamify-react-prod

    ports: 
      - 80:80

    env_file:
      - ./client/.env 

  server: 
    build:
      context: ./server
      dockerfile: Dockerfile.dev

    image: gamify-node

    container_name: gamify-node
    # Import environment variables from '.env' files
    env_file:
      - ./server/.env

    # Define volumes for persisting data
    volumes:
      - /app/server/node_modules
      - ./server:/app/server
      - ./../test:/app/client/tests

    #Expose the Node.js server on port 8080.
    ports:
      - 8080:8080
    command: /bin/sh -c "sleep 20 && npm run dev"

  mysql:
    # Use the 'mysql' Docker image. It consists of a prebuilt environment for running MySQL.
    image: mysql
    # Simply the name of the created container
    container_name: gamify-mysql
    # The docker container will automatically restart if it stops. However, if manually stopped, it will not restart until manually restarted
    restart: always
    # Environment variables the mysql image uses to initialize the databse server
    environment:
      # Create the MySql database gamifyDb
      MYSQL_DATABASE: 'gamifyDb'
      # Creates a MySql user who has access to gamifyDb
      MYSQL_USER: 'gamify_user'
      # Sets the password for the user
      MYSQL_PASSWORD: 'gamifyGeeks'
      # Set the root password. Not actually sure what it does.
      MYSQL_ROOT_PASSWORD: 'gamifyRoot'
    # From my understanding, Volumes are used to persist data generated by and used by Docker containers
    volumes:
      # Where the MySql data will persist
      - mysql-data:/var/lib/mysql
      # This is actually mounting local files (our sql file) to docker's entry point
      # This allows us to have all the SQL scripts automatically executed upon container startups
      - ./server/DDL/gamifyDb.sql:/docker-entrypoint-initdb.d/gamifyDb.sql
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 1m30s
      timeout: 20s
      retries: 10
      start_period: 30s
# Define the persistent volume mentioned earlier. This is where the MySql data will be stored.
volumes:
  mysql-data: